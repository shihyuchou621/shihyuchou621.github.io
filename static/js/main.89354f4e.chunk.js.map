{"version":3,"sources":["hooks/HW27/Carousel.js","hooks/HW27/index.js","serviceWorker.js","index.js"],"names":["Carousel","props","timeout","useState","isMove","setIsMove","whichShow","setWhichShow","children","itemList","setItemList","useEffect","time","setInterval","length","setTimeout","slice","cycle","clearTimeout","className","map","item","index","key","cx","animationHide","animationShow","showDots","keys","dotShow","Index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAKe,SAASA,EAASC,GAAQ,IAMnCC,EANkC,EAEVC,oBAAS,GAFC,mBAE/BC,EAF+B,KAEvBC,EAFuB,OAGJF,mBAAS,GAHL,mBAG/BG,EAH+B,KAGpBC,EAHoB,OAINJ,mBAASF,EAAMO,UAJT,mBAI/BC,EAJ+B,KAIrBC,EAJqB,KA+BtC,OAPAC,qBAAU,WAER,OAlBY,WAAO,IACXC,EAASX,EAATW,KACRV,EAAUW,aAAY,WACpBR,GAAU,GACVE,GAAa,SAAAD,GAAS,OAAMA,EAAY,GAAMG,EAASK,UAEvDC,YAAW,WACTL,GAAY,SAAAD,GAAQ,4BACfA,EAASO,MAAM,IADA,YAEfP,EAASO,MAAM,EAAE,QAEtBX,GAAU,KACTO,EAAO,KACTA,GAIHK,GACO,WACLC,aAAahB,MAEd,IAGD,yBAAKiB,UAAU,WACZV,EAASW,KAAI,SAACC,EAAMC,GAAP,OACZ,yBAAKC,IAAKD,EAAOH,UAAWK,IAAG,QAAS,CACtCC,cAAyB,IAAVH,GAAelB,EAC9BsB,cAAyB,IAAVJ,GAAelB,KAC7BiB,MAGJpB,EAAM0B,UACH,yBAAKR,UAAU,eACZ,YAAIV,EAASmB,QAAQR,KAAI,SAAAE,GAAK,OAC7B,yBAAKC,IAAKD,EAAOH,UAAWK,IAAG,OAAQ,CACrCK,QAASP,IAAUhB,W,MC3CpB,SAASwB,IAEtB,OACE,6BACE,kBAAC,EAAD,CACElB,KAAM,KACNe,UAAU,GAKV,yBAAKR,UAAU,WAAf,KACA,yBAAKA,UAAU,WAAf,KACA,yBAAKA,UAAU,WAAf,OCPYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEP,6BACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.89354f4e.chunk.js","sourcesContent":["import cx from 'classnames';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport './Carousel.css';\r\n\r\nexport default function Carousel(props) {\r\n\r\n  const [isMove, setIsMove] = useState(false);\r\n  const [whichShow, setWhichShow] = useState(0);\r\n  const [itemList, setItemList] = useState(props.children);\r\n\r\n  let timeout;\r\n\r\n  const cycle = () => {\r\n    const { time } = props;\r\n    timeout = setInterval(() => {\r\n      setIsMove(true);\r\n      setWhichShow(whichShow => ( whichShow + 1 ) % itemList.length);\r\n\r\n      setTimeout(() => {\r\n        setItemList(itemList => [\r\n          ...itemList.slice(1),\r\n          ...itemList.slice(0,1)\r\n        ]);\r\n        setIsMove(false);\r\n      }, time / 3);\r\n    }, time);\r\n  };\r\n\r\n  useEffect(() => {\r\n    cycle();\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      {itemList.map((item, index) =>\r\n        <div key={index} className={cx(\"item \", {\r\n          animationHide: index === 0 && isMove,\r\n          animationShow: index === 1 && isMove})}>\r\n          {item}\r\n        </div>\r\n      )}\r\n      {props.showDots &&\r\n          <div className=\"dotsWrapper\">\r\n            {[...itemList.keys()].map(index =>\r\n              <div key={index} className={cx(\"dots\", {\r\n                dotShow: index === whichShow,\r\n              })} />\r\n            )}\r\n          </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport Carousel from './Carousel';\r\n\r\nimport './style.css';\r\n\r\nexport default function Index() {\r\n  // component的children傳到子層會變成陣列形式，一個標籤一個項目\r\n  return (\r\n    <div>\r\n      <Carousel\r\n        time={1500}\r\n        showDots={true}\r\n      >\r\n        {/* css in js\r\n          <div style={{height: '100%'}}>1</div>\r\n        */}\r\n        <div className=\"content\">1</div>\r\n        <div className=\"content\">2</div>\r\n        <div className=\"content\">3</div>\r\n      </Carousel>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport HW from './hooks/HW27';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <div>\r\n    <HW />\r\n  </div>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}